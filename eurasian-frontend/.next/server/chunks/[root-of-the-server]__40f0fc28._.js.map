{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kushagra%20Tandon/Downloads/eursianAuge/eurasian-frontend/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\n// Utility functions for common database operations\r\nexport const dbUtils = {\r\n  // User operations\r\n  async createUser(data: {\r\n    email: string\r\n    name?: string\r\n    password?: string\r\n    googleId?: string\r\n    avatar?: string\r\n  }) {\r\n    return await prisma.user.create({\r\n      data,\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        name: true,\r\n        avatar: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserById(id: string) {\r\n    return await prisma.user.findUnique({\r\n      where: { id },\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        name: true,\r\n        avatar: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserByEmail(email: string) {\r\n    return await prisma.user.findUnique({\r\n      where: { email },\r\n    })\r\n  },\r\n\r\n  // Subscription operations\r\n  async createSubscription(data: {\r\n    userId: string\r\n    plan: string\r\n    price: number\r\n    billingCycle?: string\r\n  }) {\r\n    return await prisma.subscription.create({\r\n      data: {\r\n        ...data,\r\n        nextPaymentDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserSubscription(userId: string) {\r\n    return await prisma.subscription.findUnique({\r\n      where: { userId },\r\n    })\r\n  },\r\n\r\n  // Threat operations\r\n  async createThreat(data: {\r\n    userId: string\r\n    socialAccountId?: string\r\n    type: string\r\n    severity: string\r\n    description: string\r\n    source?: string\r\n    confidence?: number\r\n    metadata?: string\r\n  }) {\r\n    return await prisma.threat.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserThreats(userId: string, limit = 50, offset = 0) {\r\n    return await prisma.threat.findMany({\r\n      where: { userId },\r\n      include: {\r\n        socialAccount: {\r\n          select: {\r\n            platform: true,\r\n            username: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n      take: limit,\r\n      skip: offset,\r\n    })\r\n  },\r\n\r\n  // Social account operations\r\n  async createSocialAccount(data: {\r\n    userId: string\r\n    platform: string\r\n    accountId: string\r\n    username?: string\r\n    accessToken?: string\r\n    refreshToken?: string\r\n  }) {\r\n    return await prisma.socialAccount.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserSocialAccounts(userId: string) {\r\n    return await prisma.socialAccount.findMany({\r\n      where: { userId, isActive: true },\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Security metrics operations\r\n  async createSecurityMetric(data: {\r\n    userId: string\r\n    metricType: string\r\n    value: number\r\n    date?: Date\r\n  }) {\r\n    return await prisma.securityMetric.create({\r\n      data: {\r\n        ...data,\r\n        date: data.date || new Date(),\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserSecurityMetrics(userId: string, metricType?: string, days = 30) {\r\n    const startDate = new Date()\r\n    startDate.setDate(startDate.getDate() - days)\r\n\r\n    const where: any = {\r\n      userId,\r\n      date: {\r\n        gte: startDate,\r\n      },\r\n    }\r\n\r\n    if (metricType) {\r\n      where.metricType = metricType\r\n    }\r\n\r\n    return await prisma.securityMetric.findMany({\r\n      where,\r\n      orderBy: { date: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Analytics operations\r\n  async logAnalytics(data: {\r\n    userId: string\r\n    eventType: string\r\n    eventData?: string\r\n    ipAddress?: string\r\n    userAgent?: string\r\n  }) {\r\n    return await prisma.analytics.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserAnalytics(userId: string, eventType?: string, days = 30) {\r\n    const startDate = new Date()\r\n    startDate.setDate(startDate.getDate() - days)\r\n\r\n    const where: any = {\r\n      userId,\r\n      createdAt: {\r\n        gte: startDate,\r\n      },\r\n    }\r\n\r\n    if (eventType) {\r\n      where.eventType = eventType\r\n    }\r\n\r\n    return await prisma.analytics.findMany({\r\n      where,\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // AI Agent operations\r\n  async createAIAgent(data: {\r\n    userId: string\r\n    name: string\r\n    type: string\r\n    tier: string\r\n    configuration?: string\r\n  }) {\r\n    return await prisma.aIAgent.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserAIAgents(userId: string) {\r\n    return await prisma.aIAgent.findMany({\r\n      where: { userId },\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Feedback operations\r\n  async createFeedback(data: {\r\n    userId: string\r\n    message: string\r\n    rating?: number\r\n    category?: string\r\n  }) {\r\n    return await prisma.feedback.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserFeedbacks(userId: string) {\r\n    return await prisma.feedback.findMany({\r\n      where: { userId },\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Social scan operations\r\n  async createSocialScan(data: {\r\n    socialAccountId: string\r\n    scanType: string\r\n  }) {\r\n    return await prisma.socialScan.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async updateSocialScan(id: string, data: {\r\n    status?: string\r\n    threatsFound?: number\r\n    threatsBlocked?: number\r\n    duration?: number\r\n    errorMessage?: string\r\n    metadata?: string\r\n  }) {\r\n    return await prisma.socialScan.update({\r\n      where: { id },\r\n      data,\r\n    })\r\n  },\r\n}\r\n\r\n// Type definitions\r\nexport type User = {\r\n  id: string\r\n  email: string\r\n  name?: string\r\n  avatar?: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type Subscription = {\r\n  id: string\r\n  userId: string\r\n  plan: string\r\n  status: string\r\n  startDate: Date\r\n  endDate?: Date\r\n  price: number\r\n  billingCycle: string\r\n  lastPaymentDate?: Date\r\n  nextPaymentDate?: Date\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type Threat = {\r\n  id: string\r\n  userId: string\r\n  socialAccountId?: string\r\n  type: string\r\n  severity: string\r\n  description: string\r\n  source?: string\r\n  status: string\r\n  actionTaken?: string\r\n  confidence?: number\r\n  metadata?: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type SocialAccount = {\r\n  id: string\r\n  userId: string\r\n  platform: string\r\n  accountId: string\r\n  username?: string\r\n  accessToken?: string\r\n  refreshToken?: string\r\n  isActive: boolean\r\n  isProtected: boolean\r\n  lastScanned?: Date\r\n  threatCount: number\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type SecurityMetric = {\r\n  id: string\r\n  userId: string\r\n  metricType: string\r\n  value: number\r\n  date: Date\r\n  createdAt: Date\r\n}\r\n\r\nexport type Analytics = {\r\n  id: string\r\n  userId: string\r\n  eventType: string\r\n  eventData?: string\r\n  ipAddress?: string\r\n  userAgent?: string\r\n  createdAt: Date\r\n}\r\n\r\nexport type AIAgent = {\r\n  id: string\r\n  userId: string\r\n  name: string\r\n  type: string\r\n  tier: string\r\n  status: string\r\n  configuration?: string\r\n  lastRun?: Date\r\n  nextRun?: Date\r\n  performance?: number\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type Feedback = {\r\n  id: string\r\n  userId: string\r\n  message: string\r\n  rating?: number\r\n  category?: string\r\n  status: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type SocialScan = {\r\n  id: string\r\n  socialAccountId: string\r\n  scanType: string\r\n  status: string\r\n  threatsFound: number\r\n  threatsBlocked: number\r\n  duration?: number\r\n  errorMessage?: string\r\n  metadata?: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kushagra%20Tandon/Downloads/eursianAuge/eurasian-frontend/src/lib/nextauth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\r\nimport GoogleProvider from 'next-auth/providers/google'\r\nimport TwitterProvider from 'next-auth/providers/twitter'\r\nimport FacebookProvider from 'next-auth/providers/facebook'\r\nimport InstagramProvider from 'next-auth/providers/instagram'\r\nimport { PrismaAdapter } from '@next-auth/prisma-adapter'\r\nimport { prisma } from './db'\r\n\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    accessToken?: string;\r\n    provider?: string;\r\n    user: {\r\n      id?: string;\r\n      name?: string | null;\r\n      email?: string | null;\r\n      image?: string | null;\r\n    };\r\n  }\r\n}\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: PrismaAdapter(prisma),\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID || '',\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\r\n    }),\r\n    TwitterProvider({\r\n      clientId: process.env.TWITTER_CLIENT_ID || '',\r\n      clientSecret: process.env.TWITTER_CLIENT_SECRET || '',\r\n      version: \"2.0\",\r\n    }),\r\n    FacebookProvider({\r\n      clientId: process.env.FACEBOOK_CLIENT_ID || '',\r\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET || '',\r\n    }),\r\n    InstagramProvider({\r\n      clientId: process.env.INSTAGRAM_CLIENT_ID || '',\r\n      clientSecret: process.env.INSTAGRAM_CLIENT_SECRET || '',\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, account, user }) {\r\n      if (account) {\r\n        token.accessToken = account.access_token\r\n        token.provider = account.provider\r\n      }\r\n      if (user) {\r\n        token.id = user.id\r\n      }\r\n      return token\r\n    },\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.accessToken = typeof token.accessToken === 'string' ? token.accessToken : undefined\r\n        session.provider = token.provider as string | undefined\r\n        session.user.id = token.id as string\r\n      }\r\n      return session\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/login',\r\n  },\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n}"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAeO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE,kHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;QACA,CAAA,GAAA,sJAAA,CAAA,UAAe,AAAD,EAAE;YACd,UAAU,QAAQ,GAAG,CAAC,iBAAiB,IAAI;YAC3C,cAAc,QAAQ,GAAG,CAAC,qBAAqB,IAAI;YACnD,SAAS;QACX;QACA,CAAA,GAAA,uJAAA,CAAA,UAAgB,AAAD,EAAE;YACf,UAAU,QAAQ,GAAG,CAAC,kBAAkB,IAAI;YAC5C,cAAc,QAAQ,GAAG,CAAC,sBAAsB,IAAI;QACtD;QACA,CAAA,GAAA,wJAAA,CAAA,UAAiB,AAAD,EAAE;YAChB,UAAU,QAAQ,GAAG,CAAC,mBAAmB,IAAI;YAC7C,cAAc,QAAQ,GAAG,CAAC,uBAAuB,IAAI;QACvD;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;YAChC,IAAI,SAAS;gBACX,MAAM,WAAW,GAAG,QAAQ,YAAY;gBACxC,MAAM,QAAQ,GAAG,QAAQ,QAAQ;YACnC;YACA,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,WAAW,GAAG,OAAO,MAAM,WAAW,KAAK,WAAW,MAAM,WAAW,GAAG;gBAClF,QAAQ,QAAQ,GAAG,MAAM,QAAQ;gBACjC,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,SAAS;QACP,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kushagra%20Tandon/Downloads/eursianAuge/eurasian-frontend/src/app/api/auth/callback/%5Bplatform%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { getServerSession } from 'next-auth'\r\nimport { authOptions } from '@/lib/nextauth'\r\nimport { prisma } from '../../../../../lib/db'\r\n\r\nexport async function GET(request: NextRequest, { params }: { params: { platform: string } }) {\r\n  try {\r\n    const session = await getServerSession(authOptions)\r\n    if (!session?.user?.email) {\r\n      const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'; // Add fallback for dev\r\n      return NextResponse.redirect(`${baseUrl}/login`);\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url)\r\n    const code = searchParams.get('code')\r\n    const state = searchParams.get('state')\r\n    \r\n    if (!code) {\r\n      const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'; // Add fallback for dev\r\n      return NextResponse.redirect(`${baseUrl}/dashboard/social?error=missing_code`);\r\n    }\r\n\r\n    // For this demo, we'll simulate the OAuth flow\r\n    const { accessToken, refreshToken, expiresAt, userInfo } = await simulateOAuthExchange(params.platform, code)\r\n    \r\n    // Get user from database\r\n    const user = await prisma.user.findUnique({\r\n      where: { email: session.user.email }\r\n    })\r\n\r\n    if (!user) {\r\n      const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'; // Add fallback for dev\r\n      return NextResponse.redirect(`${baseUrl}/dashboard/social?error=user_not_found`);\r\n    }\r\n\r\n    // Store the social account connection\r\n    await prisma.socialAccount.upsert({\r\n      where: {\r\n        userId_platform: {\r\n          userId: user.id,\r\n          platform: params.platform\r\n        }\r\n      },\r\n      update: {\r\n        accessToken,\r\n        refreshToken,\r\n        expiresAt: expiresAt ? new Date(expiresAt) : null,\r\n        accountId: userInfo.id,\r\n        username: userInfo.username,\r\n        email: userInfo.email,\r\n        avatar: userInfo.avatar,\r\n        isActive: true,\r\n        followers: userInfo.followers || 0,\r\n        following: userInfo.following || 0,\r\n        posts: userInfo.posts || 0\r\n      },\r\n      create: {\r\n        userId: user.id,\r\n        platform: params.platform,\r\n        accessToken,\r\n        refreshToken,\r\n        expiresAt: expiresAt ? new Date(expiresAt) : null,\r\n        accountId: userInfo.id,\r\n        username: userInfo.username,\r\n        email: userInfo.email,\r\n        avatar: userInfo.avatar,\r\n        isActive: true,\r\n        followers: userInfo.followers || 0,\r\n        following: userInfo.following || 0,\r\n        posts: userInfo.posts || 0\r\n      }\r\n    })\r\n\r\n    // Log the connection event\r\n    await prisma.analytics.create({\r\n      data: {\r\n        userId: user.id,\r\n        eventType: 'oauth_callback_success',\r\n        eventData: JSON.stringify({\r\n          platform: params.platform,\r\n          accountId: userInfo.id,\r\n          username: userInfo.username\r\n        })\r\n      }\r\n    })\r\n\r\n    const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'; // Add fallback for dev\r\n    return NextResponse.redirect(`${baseUrl}/dashboard/social?success=true`);\r\n  } catch (error) {\r\n    console.error('OAuth callback error:', error)\r\n    \r\n    // Log the error\r\n    const session = await getServerSession(authOptions);\r\n    if (session?.user?.email) {\r\n      const user = await prisma.user.findUnique({\r\n        where: { email: session.user.email }\r\n      })\r\n      \r\n      if (user) {\r\n        await prisma.analytics.create({\r\n          data: {\r\n            userId: user.id,\r\n            eventType: 'oauth_callback_error',\r\n            eventData: JSON.stringify({\r\n              platform: params.platform,\r\n              error: error instanceof Error ? error.message : String(error)\r\n            })\r\n          }\r\n        })\r\n      }\r\n    }\r\n    \r\n    const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'; // Add fallback for dev\r\n    return NextResponse.redirect(`${baseUrl}/dashboard/social?error=true`);\r\n  }\r\n}\r\n\r\n// Simulated OAuth exchange function\r\nasync function simulateOAuthExchange(platform: string, code: string): Promise<{\r\n  accessToken: string\r\n  refreshToken?: string\r\n  expiresAt?: number\r\n  userInfo: {\r\n    id: string\r\n    username: string\r\n    email?: string\r\n    avatar?: string\r\n    followers?: number\r\n    following?: number\r\n    posts?: number\r\n  }\r\n}> {\r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 1000))\r\n  \r\n  // Generate mock tokens and user info based on platform\r\n  const mockUserInfo = {\r\n    instagram: {\r\n      id: `ig_${Math.random().toString(36).substr(2, 9)}`,\r\n      username: 'instagram_user',\r\n      email: 'user@instagram.com',\r\n      avatar: 'https://via.placeholder.com/150',\r\n      followers: Math.floor(Math.random() * 10000),\r\n      following: Math.floor(Math.random() * 1000),\r\n      posts: Math.floor(Math.random() * 500)\r\n    },\r\n    twitter: {\r\n      id: `tw_${Math.random().toString(36).substr(2, 9)}`,\r\n      username: 'twitter_user',\r\n      email: 'user@twitter.com',\r\n      avatar: 'https://via.placeholder.com/150',\r\n      followers: Math.floor(Math.random() * 5000),\r\n      following: Math.floor(Math.random() * 2000),\r\n      posts: Math.floor(Math.random() * 10000)\r\n    },\r\n    facebook: {\r\n      id: `fb_${Math.random().toString(36).substr(2, 9)}`,\r\n      username: 'facebook_user',\r\n      email: 'user@facebook.com',\r\n      avatar: 'https://via.placeholder.com/150',\r\n      followers: Math.floor(Math.random() * 500),\r\n      following: Math.floor(Math.random() * 300),\r\n      posts: Math.floor(Math.random() * 200)\r\n    }\r\n  }\r\n\r\n  const userInfo = mockUserInfo[platform] || mockUserInfo.instagram\r\n\r\n  return {\r\n    accessToken: `mock_access_token_${Math.random().toString(36).substr(2, 32)}`,\r\n    refreshToken: `mock_refresh_token_${Math.random().toString(36).substr(2, 32)}`,\r\n    expiresAt: Date.now() + (3600 * 1000), // 1 hour from now\r\n    userInfo\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}