{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Parth/Downloads/eurasianJod/eurasian-frontend/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\n// Utility functions for common database operations\nexport const dbUtils = {\n  // User operations\n  async createUser(data: {\n    email: string\n    name?: string\n    password?: string\n    googleId?: string\n    avatar?: string\n  }) {\n    return await prisma.user.create({\n      data,\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n  },\n\n  async getUserById(id: string) {\n    return await prisma.user.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n  },\n\n  async getUserByEmail(email: string) {\n    return await prisma.user.findUnique({\n      where: { email },\n    })\n  },\n\n  // Subscription operations\n  async createSubscription(data: {\n    userId: string\n    plan: string\n    price: number\n    billingCycle?: string\n  }) {\n    return await prisma.subscription.create({\n      data: {\n        ...data,\n        nextPaymentDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      },\n    })\n  },\n\n  async getUserSubscription(userId: string) {\n    return await prisma.subscription.findUnique({\n      where: { userId },\n    })\n  },\n\n  // Threat operations\n  async createThreat(data: {\n    userId: string\n    socialAccountId?: string\n    type: string\n    severity: string\n    description: string\n    source?: string\n    confidence?: number\n    metadata?: string\n  }) {\n    return await prisma.threat.create({\n      data,\n    })\n  },\n\n  async getUserThreats(userId: string, limit = 50, offset = 0) {\n    return await prisma.threat.findMany({\n      where: { userId },\n      include: {\n        socialAccount: {\n          select: {\n            platform: true,\n            username: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n      take: limit,\n      skip: offset,\n    })\n  },\n\n  // Social account operations\n  async createSocialAccount(data: {\n    userId: string\n    platform: string\n    accountId: string\n    username?: string\n    accessToken?: string\n    refreshToken?: string\n  }) {\n    return await prisma.socialAccount.create({\n      data,\n    })\n  },\n\n  async getUserSocialAccounts(userId: string) {\n    return await prisma.socialAccount.findMany({\n      where: { userId, isActive: true },\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // Security metrics operations\n  async createSecurityMetric(data: {\n    userId: string\n    metricType: string\n    value: number\n    date?: Date\n  }) {\n    return await prisma.securityMetric.create({\n      data: {\n        ...data,\n        date: data.date || new Date(),\n      },\n    })\n  },\n\n  async getUserSecurityMetrics(userId: string, metricType?: string, days = 30) {\n    const startDate = new Date()\n    startDate.setDate(startDate.getDate() - days)\n\n    const where: any = {\n      userId,\n      date: {\n        gte: startDate,\n      },\n    }\n\n    if (metricType) {\n      where.metricType = metricType\n    }\n\n    return await prisma.securityMetric.findMany({\n      where,\n      orderBy: { date: 'desc' },\n    })\n  },\n\n  // Analytics operations\n  async logAnalytics(data: {\n    userId: string\n    eventType: string\n    eventData?: string\n    ipAddress?: string\n    userAgent?: string\n  }) {\n    return await prisma.analytics.create({\n      data,\n    })\n  },\n\n  async getUserAnalytics(userId: string, eventType?: string, days = 30) {\n    const startDate = new Date()\n    startDate.setDate(startDate.getDate() - days)\n\n    const where: any = {\n      userId,\n      createdAt: {\n        gte: startDate,\n      },\n    }\n\n    if (eventType) {\n      where.eventType = eventType\n    }\n\n    return await prisma.analytics.findMany({\n      where,\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // AI Agent operations\n  async createAIAgent(data: {\n    userId: string\n    name: string\n    type: string\n    tier: string\n    configuration?: string\n  }) {\n    return await prisma.aIAgent.create({\n      data,\n    })\n  },\n\n  async getUserAIAgents(userId: string) {\n    return await prisma.aIAgent.findMany({\n      where: { userId },\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // Feedback operations\n  async createFeedback(data: {\n    userId: string\n    message: string\n    rating?: number\n    category?: string\n  }) {\n    return await prisma.feedback.create({\n      data,\n    })\n  },\n\n  async getUserFeedbacks(userId: string) {\n    return await prisma.feedback.findMany({\n      where: { userId },\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // Social scan operations\n  async createSocialScan(data: {\n    socialAccountId: string\n    scanType: string\n  }) {\n    return await prisma.socialScan.create({\n      data,\n    })\n  },\n\n  async updateSocialScan(id: string, data: {\n    status?: string\n    threatsFound?: number\n    threatsBlocked?: number\n    duration?: number\n    errorMessage?: string\n    metadata?: string\n  }) {\n    return await prisma.socialScan.update({\n      where: { id },\n      data,\n    })\n  },\n}\n\n// Type definitions\nexport type User = {\n  id: string\n  email: string\n  name?: string\n  avatar?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type Subscription = {\n  id: string\n  userId: string\n  plan: string\n  status: string\n  startDate: Date\n  endDate?: Date\n  price: number\n  billingCycle: string\n  lastPaymentDate?: Date\n  nextPaymentDate?: Date\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type Threat = {\n  id: string\n  userId: string\n  socialAccountId?: string\n  type: string\n  severity: string\n  description: string\n  source?: string\n  status: string\n  actionTaken?: string\n  confidence?: number\n  metadata?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type SocialAccount = {\n  id: string\n  userId: string\n  platform: string\n  accountId: string\n  username?: string\n  accessToken?: string\n  refreshToken?: string\n  isActive: boolean\n  isProtected: boolean\n  lastScanned?: Date\n  threatCount: number\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type SecurityMetric = {\n  id: string\n  userId: string\n  metricType: string\n  value: number\n  date: Date\n  createdAt: Date\n}\n\nexport type Analytics = {\n  id: string\n  userId: string\n  eventType: string\n  eventData?: string\n  ipAddress?: string\n  userAgent?: string\n  createdAt: Date\n}\n\nexport type AIAgent = {\n  id: string\n  userId: string\n  name: string\n  type: string\n  tier: string\n  status: string\n  configuration?: string\n  lastRun?: Date\n  nextRun?: Date\n  performance?: number\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type Feedback = {\n  id: string\n  userId: string\n  message: string\n  rating?: number\n  category?: string\n  status: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type SocialScan = {\n  id: string\n  socialAccountId: string\n  scanType: string\n  status: string\n  threatsFound: number\n  threatsBlocked: number\n  duration?: number\n  errorMessage?: string\n  metadata?: string\n  createdAt: Date\n  updatedAt: Date\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Parth/Downloads/eurasianJod/eurasian-frontend/src/lib/nextauth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\r\nimport GoogleProvider from 'next-auth/providers/google'\r\nimport TwitterProvider from 'next-auth/providers/twitter'\r\nimport FacebookProvider from 'next-auth/providers/facebook'\r\nimport InstagramProvider from 'next-auth/providers/instagram'\r\nimport { PrismaAdapter } from '@next-auth/prisma-adapter'\r\nimport { prisma } from './db'\r\n\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    accessToken?: string;\r\n    provider?: string;\r\n    user: {\r\n      id?: string;\r\n      name?: string | null;\r\n      email?: string | null;\r\n      image?: string | null;\r\n    };\r\n  }\r\n}\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: PrismaAdapter(prisma),\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID || '',\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\r\n    }),\r\n    TwitterProvider({\r\n      clientId: process.env.TWITTER_CLIENT_ID || '',\r\n      clientSecret: process.env.TWITTER_CLIENT_SECRET || '',\r\n      version: \"2.0\",\r\n    }),\r\n    FacebookProvider({\r\n      clientId: process.env.FACEBOOK_CLIENT_ID || '',\r\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET || '',\r\n    }),\r\n    InstagramProvider({\r\n      clientId: process.env.INSTAGRAM_CLIENT_ID || '',\r\n      clientSecret: process.env.INSTAGRAM_CLIENT_SECRET || '',\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, account, user }) {\r\n      if (account) {\r\n        token.accessToken = account.access_token\r\n        token.provider = account.provider\r\n      }\r\n      if (user) {\r\n        token.id = user.id\r\n      }\r\n      return token\r\n    },\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.accessToken = typeof token.accessToken === 'string' ? token.accessToken : undefined\r\n        session.provider = token.provider as string | undefined\r\n        session.user.id = token.id as string\r\n      }\r\n      return session\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/login',\r\n  },\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n}"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAeO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE,kHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;QACA,CAAA,GAAA,sJAAA,CAAA,UAAe,AAAD,EAAE;YACd,UAAU,QAAQ,GAAG,CAAC,iBAAiB,IAAI;YAC3C,cAAc,QAAQ,GAAG,CAAC,qBAAqB,IAAI;YACnD,SAAS;QACX;QACA,CAAA,GAAA,uJAAA,CAAA,UAAgB,AAAD,EAAE;YACf,UAAU,QAAQ,GAAG,CAAC,kBAAkB,IAAI;YAC5C,cAAc,QAAQ,GAAG,CAAC,sBAAsB,IAAI;QACtD;QACA,CAAA,GAAA,wJAAA,CAAA,UAAiB,AAAD,EAAE;YAChB,UAAU,QAAQ,GAAG,CAAC,mBAAmB,IAAI;YAC7C,cAAc,QAAQ,GAAG,CAAC,uBAAuB,IAAI;QACvD;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;YAChC,IAAI,SAAS;gBACX,MAAM,WAAW,GAAG,QAAQ,YAAY;gBACxC,MAAM,QAAQ,GAAG,QAAQ,QAAQ;YACnC;YACA,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,WAAW,GAAG,OAAO,MAAM,WAAW,KAAK,WAAW,MAAM,WAAW,GAAG;gBAClF,QAAQ,QAAQ,GAAG,MAAM,QAAQ;gBACjC,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,SAAS;QACP,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Parth/Downloads/eurasianJod/eurasian-frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\r\nimport { authOptions } from '@/lib/nextauth'\r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,wHAAA,CAAA,cAAW","debugId":null}}]
}