{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kushagra%20Tandon/Downloads/eursianAuge/eurasian-frontend/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\n// Utility functions for common database operations\r\nexport const dbUtils = {\r\n  // User operations\r\n  async createUser(data: {\r\n    email: string\r\n    name?: string\r\n    password?: string\r\n    googleId?: string\r\n    avatar?: string\r\n  }) {\r\n    return await prisma.user.create({\r\n      data,\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        name: true,\r\n        avatar: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserById(id: string) {\r\n    return await prisma.user.findUnique({\r\n      where: { id },\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        name: true,\r\n        avatar: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserByEmail(email: string) {\r\n    return await prisma.user.findUnique({\r\n      where: { email },\r\n    })\r\n  },\r\n\r\n  // Subscription operations\r\n  async createSubscription(data: {\r\n    userId: string\r\n    plan: string\r\n    price: number\r\n    billingCycle?: string\r\n  }) {\r\n    return await prisma.subscription.create({\r\n      data: {\r\n        ...data,\r\n        nextPaymentDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserSubscription(userId: string) {\r\n    return await prisma.subscription.findUnique({\r\n      where: { userId },\r\n    })\r\n  },\r\n\r\n  // Threat operations\r\n  async createThreat(data: {\r\n    userId: string\r\n    socialAccountId?: string\r\n    type: string\r\n    severity: string\r\n    description: string\r\n    source?: string\r\n    confidence?: number\r\n    metadata?: string\r\n  }) {\r\n    return await prisma.threat.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserThreats(userId: string, limit = 50, offset = 0) {\r\n    return await prisma.threat.findMany({\r\n      where: { userId },\r\n      include: {\r\n        socialAccount: {\r\n          select: {\r\n            platform: true,\r\n            username: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n      take: limit,\r\n      skip: offset,\r\n    })\r\n  },\r\n\r\n  // Social account operations\r\n  async createSocialAccount(data: {\r\n    userId: string\r\n    platform: string\r\n    accountId: string\r\n    username?: string\r\n    accessToken?: string\r\n    refreshToken?: string\r\n  }) {\r\n    return await prisma.socialAccount.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserSocialAccounts(userId: string) {\r\n    return await prisma.socialAccount.findMany({\r\n      where: { userId, isActive: true },\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Security metrics operations\r\n  async createSecurityMetric(data: {\r\n    userId: string\r\n    metricType: string\r\n    value: number\r\n    date?: Date\r\n  }) {\r\n    return await prisma.securityMetric.create({\r\n      data: {\r\n        ...data,\r\n        date: data.date || new Date(),\r\n      },\r\n    })\r\n  },\r\n\r\n  async getUserSecurityMetrics(userId: string, metricType?: string, days = 30) {\r\n    const startDate = new Date()\r\n    startDate.setDate(startDate.getDate() - days)\r\n\r\n    const where: any = {\r\n      userId,\r\n      date: {\r\n        gte: startDate,\r\n      },\r\n    }\r\n\r\n    if (metricType) {\r\n      where.metricType = metricType\r\n    }\r\n\r\n    return await prisma.securityMetric.findMany({\r\n      where,\r\n      orderBy: { date: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Analytics operations\r\n  async logAnalytics(data: {\r\n    userId: string\r\n    eventType: string\r\n    eventData?: string\r\n    ipAddress?: string\r\n    userAgent?: string\r\n  }) {\r\n    return await prisma.analytics.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserAnalytics(userId: string, eventType?: string, days = 30) {\r\n    const startDate = new Date()\r\n    startDate.setDate(startDate.getDate() - days)\r\n\r\n    const where: any = {\r\n      userId,\r\n      createdAt: {\r\n        gte: startDate,\r\n      },\r\n    }\r\n\r\n    if (eventType) {\r\n      where.eventType = eventType\r\n    }\r\n\r\n    return await prisma.analytics.findMany({\r\n      where,\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // AI Agent operations\r\n  async createAIAgent(data: {\r\n    userId: string\r\n    name: string\r\n    type: string\r\n    tier: string\r\n    configuration?: string\r\n  }) {\r\n    return await prisma.aIAgent.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserAIAgents(userId: string) {\r\n    return await prisma.aIAgent.findMany({\r\n      where: { userId },\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Feedback operations\r\n  async createFeedback(data: {\r\n    userId: string\r\n    message: string\r\n    rating?: number\r\n    category?: string\r\n  }) {\r\n    return await prisma.feedback.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async getUserFeedbacks(userId: string) {\r\n    return await prisma.feedback.findMany({\r\n      where: { userId },\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n  },\r\n\r\n  // Social scan operations\r\n  async createSocialScan(data: {\r\n    socialAccountId: string\r\n    scanType: string\r\n  }) {\r\n    return await prisma.socialScan.create({\r\n      data,\r\n    })\r\n  },\r\n\r\n  async updateSocialScan(id: string, data: {\r\n    status?: string\r\n    threatsFound?: number\r\n    threatsBlocked?: number\r\n    duration?: number\r\n    errorMessage?: string\r\n    metadata?: string\r\n  }) {\r\n    return await prisma.socialScan.update({\r\n      where: { id },\r\n      data,\r\n    })\r\n  },\r\n}\r\n\r\n// Type definitions\r\nexport type User = {\r\n  id: string\r\n  email: string\r\n  name?: string\r\n  avatar?: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type Subscription = {\r\n  id: string\r\n  userId: string\r\n  plan: string\r\n  status: string\r\n  startDate: Date\r\n  endDate?: Date\r\n  price: number\r\n  billingCycle: string\r\n  lastPaymentDate?: Date\r\n  nextPaymentDate?: Date\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type Threat = {\r\n  id: string\r\n  userId: string\r\n  socialAccountId?: string\r\n  type: string\r\n  severity: string\r\n  description: string\r\n  source?: string\r\n  status: string\r\n  actionTaken?: string\r\n  confidence?: number\r\n  metadata?: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type SocialAccount = {\r\n  id: string\r\n  userId: string\r\n  platform: string\r\n  accountId: string\r\n  username?: string\r\n  accessToken?: string\r\n  refreshToken?: string\r\n  isActive: boolean\r\n  isProtected: boolean\r\n  lastScanned?: Date\r\n  threatCount: number\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type SecurityMetric = {\r\n  id: string\r\n  userId: string\r\n  metricType: string\r\n  value: number\r\n  date: Date\r\n  createdAt: Date\r\n}\r\n\r\nexport type Analytics = {\r\n  id: string\r\n  userId: string\r\n  eventType: string\r\n  eventData?: string\r\n  ipAddress?: string\r\n  userAgent?: string\r\n  createdAt: Date\r\n}\r\n\r\nexport type AIAgent = {\r\n  id: string\r\n  userId: string\r\n  name: string\r\n  type: string\r\n  tier: string\r\n  status: string\r\n  configuration?: string\r\n  lastRun?: Date\r\n  nextRun?: Date\r\n  performance?: number\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type Feedback = {\r\n  id: string\r\n  userId: string\r\n  message: string\r\n  rating?: number\r\n  category?: string\r\n  status: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport type SocialScan = {\r\n  id: string\r\n  socialAccountId: string\r\n  scanType: string\r\n  status: string\r\n  threatsFound: number\r\n  threatsBlocked: number\r\n  duration?: number\r\n  errorMessage?: string\r\n  metadata?: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kushagra%20Tandon/Downloads/eursianAuge/eurasian-frontend/src/app/api/threats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma, dbUtils } from '@/lib/db'\r\n\r\n// Threat types and severities\r\nconst THREAT_TYPES = [\r\n  'phishing',\r\n  'malware',\r\n  'suspicious_activity',\r\n  'fake_profile',\r\n  'harassment',\r\n  'spam',\r\n  'impersonation',\r\n  'data_breach',\r\n  'account_takeover'\r\n]\r\n\r\nconst SEVERITY_LEVELS = ['low', 'medium', 'high', 'critical']\r\n\r\nconst STATUSES = ['detected', 'investigating', 'blocked', 'resolved', 'false_positive']\r\n\r\nconst ACTIONS = ['blocked', 'reported', 'ignored', 'monitored']\r\n\r\n// Simulated threat detection logic\r\nfunction generateMockThreat(userId: string, socialAccountId?: string) {\r\n  const threatTypes = THREAT_TYPES.filter(type => {\r\n    // Filter based on subscription tier (simplified logic)\r\n    return Math.random() > 0.3 // 70% chance for any threat type\r\n  })\r\n\r\n  const type = threatTypes[Math.floor(Math.random() * threatTypes.length)]\r\n  const severity = SEVERITY_LEVELS[Math.floor(Math.random() * SEVERITY_LEVELS.length)]\r\n  \r\n  const descriptions = {\r\n    phishing: [\r\n      'Suspicious link detected in direct message',\r\n      'Fake login page attempting to steal credentials',\r\n      'Phishing email targeting account credentials'\r\n    ],\r\n    malware: [\r\n      'Malicious file attachment detected',\r\n      'Suspicious download link identified',\r\n      'Potential malware in shared content'\r\n    ],\r\n    suspicious_activity: [\r\n      'Unusual login attempt from new location',\r\n      'Multiple failed login attempts detected',\r\n      'Suspicious account behavior pattern'\r\n    ],\r\n    fake_profile: [\r\n      'Fake profile impersonating user',\r\n      'Bot account detected following user',\r\n      'Suspicious account creation pattern'\r\n    ],\r\n    harassment: [\r\n      'Harassing messages detected',\r\n      'Bullying content identified',\r\n      'Threatening language in comments'\r\n    ],\r\n    spam: [\r\n      'Spam messages detected in inbox',\r\n      'Unsolicited promotional content',\r\n      'Mass messaging pattern identified'\r\n    ],\r\n    impersonation: [\r\n      'Account impersonating user detected',\r\n      'Fake profile using user\\'s identity',\r\n      'Impersonation attempt blocked'\r\n    ],\r\n    data_breach: [\r\n      'Potential data breach detected',\r\n      'Unusual data access pattern',\r\n      'Suspicious data export activity'\r\n    ],\r\n    account_takeover: [\r\n      'Account takeover attempt detected',\r\n      'Unauthorized access attempt',\r\n      'Suspicious password change request'\r\n    ]\r\n  }\r\n\r\n  const typeDescriptions = descriptions[type as keyof typeof descriptions] || ['Suspicious activity detected']\r\n  const description = typeDescriptions[Math.floor(Math.random() * typeDescriptions.length)]\r\n\r\n  return {\r\n    userId,\r\n    socialAccountId,\r\n    type,\r\n    severity,\r\n    description,\r\n    status: 'detected',\r\n    confidence: Math.random() * 0.4 + 0.6, // 0.6 to 1.0\r\n    metadata: JSON.stringify({\r\n      detectionMethod: 'ai_analysis',\r\n      riskScore: Math.floor(Math.random() * 100),\r\n      indicators: generateMockIndicators(type)\r\n    })\r\n  }\r\n}\r\n\r\nfunction generateMockIndicators(type: string) {\r\n  const indicators = {\r\n    phishing: ['suspicious_link', 'fake_domain', 'credential_theft'],\r\n    malware: ['file_attachment', 'download_link', 'executable'],\r\n    suspicious_activity: ['unusual_location', 'failed_attempts', 'timing_pattern'],\r\n    fake_profile: ['profile_similarity', 'creation_pattern', 'behavior_analysis'],\r\n    harassment: ['toxic_language', 'threat_keywords', 'report_frequency'],\r\n    spam: ['mass_messaging', 'promotional_content', 'unsolicited_contact'],\r\n    impersonation: ['profile_copy', 'identity_theft', 'name_similarity'],\r\n    data_breach: ['data_access', 'export_activity', 'unusual_queries'],\r\n    account_takeover: ['password_attempt', 'session_hijack', 'unauthorized_device']\r\n  }\r\n\r\n  return indicators[type as keyof typeof indicators] || ['suspicious_activity']\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Get user from session cookie\r\n    const sessionCookie = request.cookies.get('session')\r\n    \r\n    if (!sessionCookie || !sessionCookie.value) {\r\n      return NextResponse.json(\r\n        { error: 'Authentication required' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    let user\r\n    try {\r\n      user = JSON.parse(sessionCookie.value)\r\n    } catch (parseError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid session' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    // Get query parameters\r\n    const { searchParams } = new URL(request.url)\r\n    const limit = parseInt(searchParams.get('limit') || '50')\r\n    const offset = parseInt(searchParams.get('offset') || '0')\r\n    const severity = searchParams.get('severity')\r\n    const status = searchParams.get('status')\r\n    const type = searchParams.get('type')\r\n\r\n    // Build where clause\r\n    const where: any = { userId: user.id }\r\n    \r\n    if (severity) where.severity = severity\r\n    if (status) where.status = status\r\n    if (type) where.type = type\r\n\r\n    // Get threats\r\n    const threats = await prisma.threat.findMany({\r\n      where,\r\n      include: {\r\n        socialAccount: {\r\n          select: {\r\n            platform: true,\r\n            username: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n      take: limit,\r\n      skip: offset,\r\n    })\r\n\r\n    // Get threat counts for statistics\r\n    const totalThreats = await prisma.threat.count({ where: { userId: user.id } })\r\n    const activeThreats = await prisma.threat.count({ \r\n      where: { \r\n        userId: user.id, \r\n        status: { in: ['detected', 'investigating'] } \r\n      } \r\n    })\r\n    const blockedThreats = await prisma.threat.count({ \r\n      where: { \r\n        userId: user.id, \r\n        status: 'blocked' \r\n      } \r\n    })\r\n\r\n    return NextResponse.json({\r\n      threats,\r\n      statistics: {\r\n        total: totalThreats,\r\n        active: activeThreats,\r\n        blocked: blockedThreats,\r\n        resolved: totalThreats - activeThreats - blockedThreats\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Threat retrieval error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Get user from session cookie\r\n    const sessionCookie = request.cookies.get('session')\r\n    \r\n    if (!sessionCookie || !sessionCookie.value) {\r\n      return NextResponse.json(\r\n        { error: 'Authentication required' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    let user\r\n    try {\r\n      user = JSON.parse(sessionCookie.value)\r\n    } catch (parseError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid session' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    const { \r\n      socialAccountId, \r\n      type, \r\n      severity, \r\n      description, \r\n      source, \r\n      confidence,\r\n      metadata \r\n    } = await request.json()\r\n\r\n    // Validate input\r\n    if (!type || !severity || !description) {\r\n      return NextResponse.json(\r\n        { error: 'Type, severity, and description are required' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    if (!THREAT_TYPES.includes(type)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid threat type' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    if (!SEVERITY_LEVELS.includes(severity)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid severity level' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Create threat\r\n    const threat = await dbUtils.createThreat({\r\n      userId: user.id,\r\n      socialAccountId,\r\n      type,\r\n      severity,\r\n      description,\r\n      source,\r\n      confidence,\r\n      metadata: metadata ? JSON.stringify(metadata) : undefined\r\n    })\r\n\r\n    // Log analytics event\r\n    try {\r\n      await dbUtils.logAnalytics({\r\n        userId: user.id,\r\n        eventType: 'threat_detected',\r\n        eventData: JSON.stringify({ \r\n          type, \r\n          severity, \r\n          source,\r\n          socialAccountId \r\n        }),\r\n        ipAddress: request.headers.get('x-forwarded-for') || 'unknown',\r\n        userAgent: request.headers.get('user-agent') || 'unknown'\r\n      })\r\n    } catch (analyticsError) {\r\n      console.error('Failed to log analytics:', analyticsError)\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: 'Threat recorded successfully',\r\n      threat\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Threat creation error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n// Simulated threat detection endpoint\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    // Get user from session cookie\r\n    const sessionCookie = request.cookies.get('session')\r\n    \r\n    if (!sessionCookie || !sessionCookie.value) {\r\n      return NextResponse.json(\r\n        { error: 'Authentication required' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    let user\r\n    try {\r\n      user = JSON.parse(sessionCookie.value)\r\n    } catch (parseError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid session' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    const { socialAccountId } = await request.json()\r\n\r\n    // Get user's social accounts\r\n    const socialAccounts = await dbUtils.getUserSocialAccounts(user.id)\r\n    \r\n    if (socialAccounts.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No social accounts found for threat scanning' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // Simulate threat detection\r\n    const detectedThreats: Array<{\r\n      status: string;\r\n      id: string;\r\n      severity: string;\r\n      type: string;\r\n      createdAt: Date;\r\n      updatedAt: Date;\r\n      userId: string;\r\n      socialAccountId: string | null;\r\n      description: string;\r\n      source: string | null;\r\n      actionTaken: string | null;\r\n      confidence: number | null;\r\n      metadata: string | null;\r\n    }> = []\r\n    const accountsToScan = socialAccountId \r\n      ? socialAccounts.filter(acc => acc.id === socialAccountId)\r\n      : socialAccounts\r\n\r\n    for (const account of accountsToScan) {\r\n      // Simulate finding 0-2 threats per account\r\n      const threatCount = Math.floor(Math.random() * 3)\r\n      \r\n      for (let i = 0; i < threatCount; i++) {\r\n        const threatData = generateMockThreat(user.id, account.id)\r\n        const threat = await dbUtils.createThreat(threatData)\r\n        detectedThreats.push(threat)\r\n      }\r\n\r\n      // Update account threat count\r\n      await prisma.socialAccount.update({\r\n        where: { id: account.id },\r\n        data: { \r\n          threatCount: account.threatCount + threatCount,\r\n          lastScanned: new Date()\r\n        }\r\n      })\r\n    }\r\n\r\n    // Log analytics event\r\n    try {\r\n      await dbUtils.logAnalytics({\r\n        userId: user.id,\r\n        eventType: 'threat_scan_completed',\r\n        eventData: JSON.stringify({ \r\n          accountsScanned: accountsToScan.length,\r\n          threatsDetected: detectedThreats.length\r\n        }),\r\n        ipAddress: request.headers.get('x-forwarded-for') || 'unknown',\r\n        userAgent: request.headers.get('user-agent') || 'unknown'\r\n      })\r\n    } catch (analyticsError) {\r\n      console.error('Failed to log analytics:', analyticsError)\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: 'Threat scan completed',\r\n      threatsDetected: detectedThreats.length,\r\n      threats: detectedThreats\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Threat scanning error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}