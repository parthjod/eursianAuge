{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Parth/Downloads/eurasianJod/eurasian-frontend/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\n// Utility functions for common database operations\nexport const dbUtils = {\n  // User operations\n  async createUser(data: {\n    email: string\n    name?: string\n    password?: string\n    googleId?: string\n    avatar?: string\n  }) {\n    return await prisma.user.create({\n      data,\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n  },\n\n  async getUserById(id: string) {\n    return await prisma.user.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n  },\n\n  async getUserByEmail(email: string) {\n    return await prisma.user.findUnique({\n      where: { email },\n    })\n  },\n\n  // Subscription operations\n  async createSubscription(data: {\n    userId: string\n    plan: string\n    price: number\n    billingCycle?: string\n  }) {\n    return await prisma.subscription.create({\n      data: {\n        ...data,\n        nextPaymentDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      },\n    })\n  },\n\n  async getUserSubscription(userId: string) {\n    return await prisma.subscription.findUnique({\n      where: { userId },\n    })\n  },\n\n  // Threat operations\n  async createThreat(data: {\n    userId: string\n    socialAccountId?: string\n    type: string\n    severity: string\n    description: string\n    source?: string\n    confidence?: number\n    metadata?: string\n  }) {\n    return await prisma.threat.create({\n      data,\n    })\n  },\n\n  async getUserThreats(userId: string, limit = 50, offset = 0) {\n    return await prisma.threat.findMany({\n      where: { userId },\n      include: {\n        socialAccount: {\n          select: {\n            platform: true,\n            username: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n      take: limit,\n      skip: offset,\n    })\n  },\n\n  // Social account operations\n  async createSocialAccount(data: {\n    userId: string\n    platform: string\n    accountId: string\n    username?: string\n    accessToken?: string\n    refreshToken?: string\n  }) {\n    return await prisma.socialAccount.create({\n      data,\n    })\n  },\n\n  async getUserSocialAccounts(userId: string) {\n    return await prisma.socialAccount.findMany({\n      where: { userId, isActive: true },\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // Security metrics operations\n  async createSecurityMetric(data: {\n    userId: string\n    metricType: string\n    value: number\n    date?: Date\n  }) {\n    return await prisma.securityMetric.create({\n      data: {\n        ...data,\n        date: data.date || new Date(),\n      },\n    })\n  },\n\n  async getUserSecurityMetrics(userId: string, metricType?: string, days = 30) {\n    const startDate = new Date()\n    startDate.setDate(startDate.getDate() - days)\n\n    const where: any = {\n      userId,\n      date: {\n        gte: startDate,\n      },\n    }\n\n    if (metricType) {\n      where.metricType = metricType\n    }\n\n    return await prisma.securityMetric.findMany({\n      where,\n      orderBy: { date: 'desc' },\n    })\n  },\n\n  // Analytics operations\n  async logAnalytics(data: {\n    userId: string\n    eventType: string\n    eventData?: string\n    ipAddress?: string\n    userAgent?: string\n  }) {\n    return await prisma.analytics.create({\n      data,\n    })\n  },\n\n  async getUserAnalytics(userId: string, eventType?: string, days = 30) {\n    const startDate = new Date()\n    startDate.setDate(startDate.getDate() - days)\n\n    const where: any = {\n      userId,\n      createdAt: {\n        gte: startDate,\n      },\n    }\n\n    if (eventType) {\n      where.eventType = eventType\n    }\n\n    return await prisma.analytics.findMany({\n      where,\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // AI Agent operations\n  async createAIAgent(data: {\n    userId: string\n    name: string\n    type: string\n    tier: string\n    configuration?: string\n  }) {\n    return await prisma.aIAgent.create({\n      data,\n    })\n  },\n\n  async getUserAIAgents(userId: string) {\n    return await prisma.aIAgent.findMany({\n      where: { userId },\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // Feedback operations\n  async createFeedback(data: {\n    userId: string\n    message: string\n    rating?: number\n    category?: string\n  }) {\n    return await prisma.feedback.create({\n      data,\n    })\n  },\n\n  async getUserFeedbacks(userId: string) {\n    return await prisma.feedback.findMany({\n      where: { userId },\n      orderBy: { createdAt: 'desc' },\n    })\n  },\n\n  // Social scan operations\n  async createSocialScan(data: {\n    socialAccountId: string\n    scanType: string\n  }) {\n    return await prisma.socialScan.create({\n      data,\n    })\n  },\n\n  async updateSocialScan(id: string, data: {\n    status?: string\n    threatsFound?: number\n    threatsBlocked?: number\n    duration?: number\n    errorMessage?: string\n    metadata?: string\n  }) {\n    return await prisma.socialScan.update({\n      where: { id },\n      data,\n    })\n  },\n}\n\n// Type definitions\nexport type User = {\n  id: string\n  email: string\n  name?: string\n  avatar?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type Subscription = {\n  id: string\n  userId: string\n  plan: string\n  status: string\n  startDate: Date\n  endDate?: Date\n  price: number\n  billingCycle: string\n  lastPaymentDate?: Date\n  nextPaymentDate?: Date\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type Threat = {\n  id: string\n  userId: string\n  socialAccountId?: string\n  type: string\n  severity: string\n  description: string\n  source?: string\n  status: string\n  actionTaken?: string\n  confidence?: number\n  metadata?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type SocialAccount = {\n  id: string\n  userId: string\n  platform: string\n  accountId: string\n  username?: string\n  accessToken?: string\n  refreshToken?: string\n  isActive: boolean\n  isProtected: boolean\n  lastScanned?: Date\n  threatCount: number\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type SecurityMetric = {\n  id: string\n  userId: string\n  metricType: string\n  value: number\n  date: Date\n  createdAt: Date\n}\n\nexport type Analytics = {\n  id: string\n  userId: string\n  eventType: string\n  eventData?: string\n  ipAddress?: string\n  userAgent?: string\n  createdAt: Date\n}\n\nexport type AIAgent = {\n  id: string\n  userId: string\n  name: string\n  type: string\n  tier: string\n  status: string\n  configuration?: string\n  lastRun?: Date\n  nextRun?: Date\n  performance?: number\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type Feedback = {\n  id: string\n  userId: string\n  message: string\n  rating?: number\n  category?: string\n  status: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport type SocialScan = {\n  id: string\n  socialAccountId: string\n  scanType: string\n  status: string\n  threatsFound: number\n  threatsBlocked: number\n  duration?: number\n  errorMessage?: string\n  metadata?: string\n  createdAt: Date\n  updatedAt: Date\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Parth/Downloads/eurasianJod/eurasian-frontend/src/app/api/auth/logout/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma, dbUtils } from '@/lib/db'\nimport bcrypt from 'bcryptjs'\n\nexport async function POST(request: NextRequest) {\n  try {\n    let body: any = {}\n    try {\n      body = await request.json()\n    } catch {\n      return NextResponse.json(\n        { error: 'Invalid request body' },\n        { status: 400 }\n      )\n    }\n\n    const { email, password } = body\n\n    // Validate input\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'Email and password are required' },\n        { status: 400 }\n      )\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: { email }\n    })\n\n    if (!user || !user.password) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      )\n    }\n\n    // Verify password\n    const isPasswordValid = await bcrypt.compare(password, user.password)\n\n    if (!isPasswordValid) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      )\n    }\n\n    // Log analytics event\n    try {\n      await dbUtils.logAnalytics({\n        userId: user.id,\n        eventType: 'login',\n        eventData: JSON.stringify({ method: 'email' }),\n        ipAddress: request.headers.get('x-forwarded-for') || 'unknown',\n        userAgent: request.headers.get('user-agent') || 'unknown'\n      })\n    } catch (analyticsError) {\n      console.error('Failed to log analytics:', analyticsError)\n    }\n\n    // Return user data (excluding password)\n    const { password: _, ...userWithoutPassword } = user\n\n    // Create response with session cookie\n    const response = NextResponse.json({\n      message: 'Login successful',\n      user: userWithoutPassword\n    })\n\n    // Set session cookie\n    response.cookies.set('session', JSON.stringify(userWithoutPassword), {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 60 * 60 * 24 * 7, // 7 days\n      path: '/'\n    })\n\n    return response\n\n  } catch (error) {\n    console.error('Login error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,IAAI,OAAY,CAAC;QACjB,IAAI;YACF,OAAO,MAAM,QAAQ,IAAI;QAC3B,EAAE,OAAM;YACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,iBAAiB;QACjB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,OAAO,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAEpE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,IAAI;YACF,MAAM,kHAAA,CAAA,UAAO,CAAC,YAAY,CAAC;gBACzB,QAAQ,KAAK,EAAE;gBACf,WAAW;gBACX,WAAW,KAAK,SAAS,CAAC;oBAAE,QAAQ;gBAAQ;gBAC5C,WAAW,QAAQ,OAAO,CAAC,GAAG,CAAC,sBAAsB;gBACrD,WAAW,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;YAClD;QACF,EAAE,OAAO,gBAAgB;YACvB,QAAQ,KAAK,CAAC,4BAA4B;QAC5C;QAEA,wCAAwC;QACxC,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,sCAAsC;QACtC,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACjC,SAAS;YACT,MAAM;QACR;QAEA,qBAAqB;QACrB,SAAS,OAAO,CAAC,GAAG,CAAC,WAAW,KAAK,SAAS,CAAC,sBAAsB;YACnE,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,KAAK,KAAK,KAAK;YACvB,MAAM;QACR;QAEA,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}